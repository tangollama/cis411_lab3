"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var testUtils_1 = require("./testUtils");
describe('customCompare', function () {
    it('should give a min heap given a non-reverse customCompare', function () {
        var heap = new testUtils_1.TestFibonacciHeap(function (a, b) {
            return a.key - b.key;
        });
        var node3 = heap.insert(13);
        var node4 = heap.insert(26);
        var node2 = heap.insert(3);
        var node1 = heap.insert(-6);
        var node5 = heap.insert(27);
        chai_1.assert.equal(heap.size(), 5);
        chai_1.assert.deepEqual(heap.extractMinimumUnsafe().key, node1.key);
        chai_1.assert.deepEqual(heap.extractMinimumUnsafe().key, node2.key);
        chai_1.assert.deepEqual(heap.extractMinimumUnsafe().key, node3.key);
        chai_1.assert.deepEqual(heap.extractMinimumUnsafe().key, node4.key);
        chai_1.assert.deepEqual(heap.extractMinimumUnsafe().key, node5.key);
        chai_1.assert.isTrue(heap.isEmpty());
    });
    it('should give a max heap given a reverse customCompare', function () {
        var heap = new testUtils_1.TestFibonacciHeap(function (a, b) {
            return b.key - a.key;
        });
        var node3 = heap.insert(13);
        var node4 = heap.insert(26);
        var node2 = heap.insert(3);
        var node1 = heap.insert(-6);
        var node5 = heap.insert(27);
        chai_1.assert.equal(heap.size(), 5);
        chai_1.assert.deepEqual(heap.extractMinimumUnsafe().key, node5.key);
        chai_1.assert.deepEqual(heap.extractMinimumUnsafe().key, node4.key);
        chai_1.assert.deepEqual(heap.extractMinimumUnsafe().key, node3.key);
        chai_1.assert.deepEqual(heap.extractMinimumUnsafe().key, node2.key);
        chai_1.assert.deepEqual(heap.extractMinimumUnsafe().key, node1.key);
        chai_1.assert.isTrue(heap.isEmpty());
    });
});
//# sourceMappingURL=custom-compare.test.js.map