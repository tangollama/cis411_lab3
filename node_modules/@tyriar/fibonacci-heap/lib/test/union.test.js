"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var testUtils_1 = require("./testUtils");
describe('union', function () {
    it('should union the 2 heaps together given 2 heaps of size 5 with overlapping elements added in order together', function () {
        var heap = new testUtils_1.TestFibonacciHeap();
        heap.insert(0);
        heap.insert(2);
        heap.insert(4);
        heap.insert(6);
        heap.insert(8);
        var other = new testUtils_1.TestFibonacciHeap();
        other.insert(1);
        other.insert(3);
        other.insert(5);
        other.insert(7);
        other.insert(9);
        chai_1.assert.equal(heap.size(), 5);
        chai_1.assert.equal(other.size(), 5);
        heap.union(other);
        chai_1.assert.equal(heap.size(), 10);
        for (var i = 0; i < 10; i++) {
            chai_1.assert.equal(heap.extractMinimumUnsafe().key, i);
        }
        chai_1.assert.isTrue(heap.isEmpty());
    });
    it('should union the 2 heaps together given 2 heaps of size 5 with overlapping elements added in reverse order together', function () {
        var heap = new testUtils_1.TestFibonacciHeap();
        heap.insert(9);
        heap.insert(7);
        heap.insert(5);
        heap.insert(3);
        heap.insert(1);
        var other = new testUtils_1.TestFibonacciHeap();
        other.insert(8);
        other.insert(6);
        other.insert(4);
        other.insert(2);
        other.insert(0);
        chai_1.assert.equal(heap.size(), 5);
        chai_1.assert.equal(other.size(), 5);
        heap.union(other);
        chai_1.assert.equal(heap.size(), 10);
        for (var i = 0; i < 10; i++) {
            chai_1.assert.equal(heap.extractMinimumUnsafe().key, i);
        }
        chai_1.assert.isTrue(heap.isEmpty());
    });
    it('should union the 2 heaps together', function () {
        var heaps = constructJumbledHeaps();
        heaps[0].union(heaps[1]);
        chai_1.assert.equal(heaps[0].size(), 10);
        for (var i = 0; i < 10; i++) {
            chai_1.assert.equal(heaps[0].extractMinimumUnsafe().key, i);
        }
        chai_1.assert.isTrue(heaps[0].isEmpty());
    });
    it('should union the 2 heaps together after extracting the minimum from each', function () {
        var heaps = constructJumbledHeaps();
        chai_1.assert.equal(heaps[0].extractMinimumUnsafe().key, 1);
        chai_1.assert.equal(heaps[1].extractMinimumUnsafe().key, 0);
        heaps[0].union(heaps[1]);
        chai_1.assert.equal(heaps[0].size(), 8);
        for (var i = 2; i < 10; i++) {
            var min = heaps[0].extractMinimum();
            if (min === null) {
                chai_1.assert.fail('extractMinimum must be non null');
                return;
            }
            chai_1.assert.equal(min.key, i);
        }
        chai_1.assert.isTrue(heaps[0].isEmpty());
    });
});
function constructJumbledHeaps() {
    var first = new testUtils_1.TestFibonacciHeap();
    first.insert(9);
    first.insert(2);
    first.insert(6);
    first.insert(1);
    first.insert(3);
    chai_1.assert.equal(first.size(), 5);
    var second = new testUtils_1.TestFibonacciHeap();
    second.insert(4);
    second.insert(8);
    second.insert(5);
    second.insert(7);
    second.insert(0);
    chai_1.assert.equal(second.size(), 5);
    return [first, second];
}
//# sourceMappingURL=union.test.js.map